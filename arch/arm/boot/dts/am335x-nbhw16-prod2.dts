/*
 * Copyright (C) 2012 Texas Instruments Incorporated - http://www.ti.com/
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
/dts-v1/;

#include "am33xx.dtsi"
#include "am335x-nbhw-common.dtsi"

/ {
	model = "NetModule NBHW16 - NB800-LWWt";
	compatible = "ti,am335x-bone-black", "ti,am335x-bone", "ti,am33xx";

	chosen {
		stdout-path = &uart1;
	};

	cpus {
		cpu@0 {
			cpu0-supply = <&dcdc1>;
			operating-points-v2 = <&cpu0_opp_table>;
		};
	};

	pwmleds {
		/* pwm leds for debugging */
		status = "disabled";
		compatible = "pwm-leds";

		dim_led {
			label = "pwm::pwm0_out";
			pwms = <&ecap0 0 100000 0>;
			max-brightness = <255>;
		};
	};

	wakeup_timer0: wakeup_timer@0 {
		compatible = "wakeup-timer";
		status = "okay";
		timer = <&timer3>;
		interrupts = <68>;
		interrupt-names	= "wakeup";
		wakeup-source;
	};

	leds {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&user_leds_s0>;
		pinctrl-1 = <&user_leds_s0_sleep>;
	};
};

&cpu0_opp_table {
	opp50@300000000 {
		opp-supported-hw = <0x00 0x0000>;
	};

	opp100@300000000 {
		opp-supported-hw = <0x06 0x0010>;
	};
};

&timer2 {
	ti,no-idle;
};

&timer3 {
		status = "okay";
		wakeup-source;
		ti,no-idle;
};

&wlan_fixed {
	gpio = <&gpio3 10 0>;
};

&reset_button {
	gpios = <&gpio0 2 GPIO_ACTIVE_LOW>;
	interrupt-parent = <&gpio0>;
	interrupts = <2 IRQ_TYPE_LEVEL_HIGH>;
	wakeup-source;
};

&gpio_keys {
	uart1_standby: uart1-standby {
		status = "okay";
		label = "UART1 standby";
		linux,code = <103>;
		gpios = <&gpio0 14 GPIO_ACTIVE_HIGH>;
		interrupt-parent = <&gpio0>;
		interrupts = <14 IRQ_TYPE_LEVEL_HIGH>;
		wakeup-source;
	};

	uart1_standby: uart1-standby {
		status = "okay";
		label = "UART1 standby";
		linux,code = <103>;
		gpios = <&gpio0 14 GPIO_ACTIVE_HIGH>;
		interrupt-parent = <&gpio0>;
		interrupts = <14 IRQ_TYPE_LEVEL_HIGH>;
		wakeup-source;
	};

};

// Add a pwm on ecap0 so that something can be measured during bringup
&epwmss0 {
	status = "disabled";
};

&ecap0 {
	status = "disabled";
	pinctrl-names = "default", "sleep";
	pinctrl-0 = <&ecap0_pins>;
	pinctrl-1 = <&ecap0_pins_sleep>;
};

// Don't touch the PWM, U-Boot does the configuration
&epwmss2 {
	status = "okay";

	// Leave ecap2 disabled, because if we would enable it, the clock would be reconfigured
	// we want to leave it as under u-boot
	ecap2: ecap@48304100 {
	};

};

&cpsw_emac0 {
	dual_emac_res_vlan = <0>;
};

// V2 only has one mac
&cpsw_emac1 {
	status = "disabled";
};

&mac {
	slaves = <1>;
};

&dcdc2 {
	status = "disabled";
};

&usb0_phy {
	pinctrl-names = "default";
	pinctrl-0 =  <&usb_host_pins>;
	status = "okay";
};

&usb1_phy {
	pinctrl-names = "default";
	pinctrl-0 =  <&usb_gsm_pins>;
	status = "okay";
};

&usb0 {
	status = "disabled";
};

&uart0 {
	/* UART0 will be enabled by u-boot if comio shield is assembled */
	status = "okay";
};

&uart1 {
	pinctrl-names = "default";
	pinctrl-0 = <&uart1_pins>;

	interrupts = <73>;
	status = "okay";
	wakeup-source;
};

&wlcore {
	compatible = "ti,wl1837";
};

&i2c0 {
	lm75: lm75@48 {
		compatible = "national,lm75";
		reg = <0x48>;
	};
};

&dcan0 {
	/* Will be enabled by u-boot if canshield is assembled */
	status = "disabled";
	pinctrl-names = "default";
	pinctrl-0 = <&can0_pins>;

};

&dcan1 {
	/* Will be enabled by u-boot if canshield is assembled */
	status = "disabled";	/* Enable only if Profile 1 is selected */
	pinctrl-names = "default";
	pinctrl-0 = <&can1_pins>;
};

&mmc1 {
	pinctrl-names = "default";
	pinctrl-0 = <&sdio_wlan_pins>;
};

&am33xx_pinmux {
	pinctrl-names = "default";
	pinctrl-0 = <&clkout2_pin>;

	user_leds_s0: user_leds_s0 {
		pinctrl-single,pins = <
			0x38 ( PIN_OUTPUT | MUX_MODE7 ) /* (V13) gpmc_ad14.gpio1[14] */ /* LED_A */
			0x3c ( PIN_OUTPUT | MUX_MODE7 ) /* (U13) gpmc_ad15.gpio1[15] */ /* LED_B */

			0x19c ( PIN_OUTPUT | MUX_MODE4 ) /* MCASP0_AHCLKR.eCAP2_in_PWM2_out MODE4 this is the WIFI Clock! */
		>;
	};

	user_leds_s0_sleep: user_leds_s0_sleep {
		pinctrl-single,pins = <
			0x38 ( PIN_INPUT | MUX_MODE7 ) /* (V13) gpmc_ad14.gpio1[14] */ /* LED_A */
			0x3c ( PIN_INPUT | MUX_MODE7 ) /* (U13) gpmc_ad15.gpio1[15] */ /* LED_B */

			/*
			* MCASP0_AHCLKR.eCAP2_in_PWM2_out MODE4 this is the WIFI Clock!
			* We need to hava an option to configure the standby muxing but we can't use the
			* ecap2 module (see there why). So we set the muxing on the led pinctrl, which supports
			* sleep state. This is a hack!
			*/
			0x19c ( PIN_INPUT| MUX_MODE7 )
		>;
	};


	ecap0_pins: backlight_pins {
		pinctrl-single,pins = <
			0x164 ( PIN_OUTPUT | MUX_MODE0 ) /* eCAP0_in_PWM0_out.eCAP0_in_PWM0_out MODE0 is an optional pwm*/
		>;
	};

	ecap0_pins_sleep: backlight_pins {
		pinctrl-single,pins = <
			0x164 ( PIN_INPUT | MUX_MODE7 ) /* eCAP0_in_PWM0_out.eCAP0_in_PWM0_out MODE0 */
		>;
	};

	usb_host_pins: usb_host_pins {
		pinctrl-single,pins = <
			0x21c ( PIN_INPUT_PULLDOWN | MUX_MODE0 ) /* (F16) USB0_DRVVBUS.USB0_DRVVBUS */
		>;
	};

	user_buttons_s0: user_buttons_s0 {
		pinctrl-single,pins = <
			0x44 ( PIN_INPUT_PULLUP | WAKEUP_EN | MUX_MODE7 ) /* (A17) gpmc_a1.gpio0[2] */ /* BUTTON */
		>;
	};

	i2c0_pins: pinmux_i2c0_pins {
		pinctrl-single,pins = <
			0x18c ( PIN_INPUT_PULLUP | SLEWCTRL_SLOW | MUX_MODE0 ) /* (C16) I2C0_SCL.I2C0_SCL */
			0x188 ( PIN_INPUT_PULLUP | SLEWCTRL_SLOW | MUX_MODE0 ) /* (C17) I2C0_SDA.I2C0_SDA */
		>;
	};

	uart0_pins: pinmux_uart0_pins {
		pinctrl-single,pins = <
			0x170 ( PIN_INPUT | MUX_MODE0 ) /* (E15) uart0_rxd.uart0_rxd */
			0x174 ( PIN_OUTPUT_PULLUP | MUX_MODE0 ) /* (E16) uart0_txd.uart0_txd */
			0x16c ( PIN_OUTPUT | MUX_MODE0 ) /* (E16) uart0_rts.uart0_rts */
		>;
	};

	uart1_pins: pinmux_uart1_pins {
		pinctrl-single,pins = <
			0x180 ( PIN_INPUT_PULLUP | SLEWCTRL_SLOW | MUX_MODE0 ) /* (D16) uart1_rxd.uart1_rxd */
			0x184 ( PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW | MUX_MODE0 ) /* (D15) uart1_txd.uart1_txd */
		>;
	};

	uart1_pins_sleep: pinmux_uart1_pins_sleep {
		pinctrl-single,pins = <
			0x180 ( PIN_INPUT | MUX_MODE7 ) /* (D16) uart1_rxd.uart1_rxd */
		>;
	};

	can0_pins: can0_pins {
		pinctrl-single,pins = <
			0x170 ( PIN_OUTPUT_PULLUP | MUX_MODE2 ) /* (E18) uart0_ctsn.dcan0_tx */
			0x174 ( PIN_INPUT | MUX_MODE2 ) /* (E17) uart0_rtsn.dcan0_rx */
		>;
	};

	can1_pins: can1_pins {
		pinctrl-single,pins = <
			0x168 ( PIN_OUTPUT_PULLUP | MUX_MODE2 ) /* (E18) uart0_ctsn.dcan1_tx */
			0x16c ( PIN_INPUT | MUX_MODE2 ) /* (E17) uart0_rtsn.dcan1_rx */
		>;
	};


	clkout2_pin: pinmux_clkout2_pin {
		pinctrl-single,pins = <
			0x1b4 ( PIN_OUTPUT | MUX_MODE3 ) /* (D14) xdma_event_intr1.clkout2 */ /* CLKOUT2 */
		>;
	};

	cpsw_default: cpsw_default {
		pinctrl-single,pins = <

			/* Slave 1 */
			0x10c ( PIN_INPUT_PULLDOWN | MUX_MODE1 ) /* (H17) gmii1_crs.rmii1_crs_dv */
			0x110 ( PIN_INPUT_PULLDOWN | MUX_MODE1 ) /* (J15) gmii1_rxer.rmii1_rxer */
			0x114 ( PIN_OUTPUT_PULLDOWN | MUX_MODE1 | SLEWCTRL_SLOW ) /* (J16) gmii1_txen.rmii1_txen */
			0x124 ( PIN_OUTPUT_PULLDOWN | MUX_MODE1 | SLEWCTRL_SLOW ) /* (K16) gmii1_txd1.rmii1_txd1 */
			0x128 ( PIN_OUTPUT_PULLDOWN | MUX_MODE1 | SLEWCTRL_SLOW ) /* (K17) gmii1_txd0.rmii1_txd0 */
			0x13c ( PIN_INPUT_PULLDOWN | MUX_MODE1 ) /* (L15) gmii1_rxd1.rmii1_rxd1 */
			0x140 ( PIN_INPUT_PULLDOWN | MUX_MODE1 ) /* (M16) gmii1_rxd0.rmii1_rxd0 */
			0x144 ( PIN_INPUT_PULLDOWN | MUX_MODE0 ) /* (H18) rmii1_refclk.rmii1_refclk */
			>;
	};

	cpsw_sleep: cpsw_sleep{
		pinctrl-single,pins = <
			/* Slave 1 */
			0x10c ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (H17) gmii1_crs.rmii1_crs_dv */
			0x110 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (J15) gmii1_rxer.rmii1_rxer */
			0x114 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (J16) gmii1_txen.rmii1_txen */
			0x124 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (K16) gmii1_txd1.rmii1_txd1 */
			0x128 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (K17) gmii1_txd0.rmii1_txd0 */
			0x13c ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (L15) gmii1_rxd1.rmii1_rxd1 */
			0x140 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (M16) gmii1_rxd0.rmii1_rxd0 */
			0x144 ( PIN_INPUT_PULLDOWN | MUX_MODE7 ) /* (H18) rmii1_refclk.rmii1_refclk */
			>;
	};


	davinci_mdio_default: davinci_mdio_default {
		pinctrl-single,pins = <
			/* MDIO */
			0x148 ( PIN_INPUT | SLEWCTRL_SLOW | MUX_MODE0 ) /* (M17) mdio_data.mdio_data */
			0x14c ( PIN_OUTPUT_PULLUP | SLEWCTRL_SLOW | MUX_MODE0 ) /* (M18) mdio_clk.mdio_clk */
		>;
	};

	davinci_mdio_sleep: davinci_mdio_sleep {
		pinctrl-single,pins = <
			/* MDIO reset value */
			0x148 (PIN_INPUT | MUX_MODE7)
			0x14c (PIN_INPUT | MUX_MODE7)
		>;
	};

	bt_uart_pins: bt_uart_pins {
		pinctrl-single,pins = <
			0xc4 ( PIN_INPUT_PULLUP | MUX_MODE4 ) /* (U2) lcd_data9.uart5_rxd */
			0xc0 ( PIN_OUTPUT_PULLDOWN | MUX_MODE4 ) /* (U1) lcd_data8.uart5_txd */
			0xd8 ( PIN_INPUT_PULLDOWN | MUX_MODE6 ) /* (V4) lcd_data14.uart5_ctsn */
			0xdc ( PIN_OUTPUT_PULLDOWN | MUX_MODE6 ) /* (T5) lcd_data15.uart5_rtsn */
		>;
	};

	sdio_wlan_pins: sdio_wlan_pins {
		pinctrl-single,pins = <
			0x100 ( PIN_INPUT | MUX_MODE0 | SLEWCTRL_SLOW ) /* (G17) mmc0_clk.mmc0_clk */
			0x104 ( PIN_INPUT | MUX_MODE0 | SLEWCTRL_SLOW ) /* (G18) mmc0_cmd.mmc0_cmd */
			0xfc ( PIN_INPUT | MUX_MODE0 | SLEWCTRL_SLOW ) /* (G16) mmc0_dat0.mmc0_dat0 */
			0xf8 ( PIN_INPUT | MUX_MODE0 | SLEWCTRL_SLOW ) /* (G15) mmc0_dat1.mmc0_dat1 */
			0xf4 ( PIN_INPUT | MUX_MODE0 | SLEWCTRL_SLOW ) /* (F18) mmc0_dat2.mmc0_dat2 */
			0xf0 ( PIN_INPUT | MUX_MODE0 | SLEWCTRL_SLOW ) /* (F17) mmc0_dat3.mmc0_dat3 */

			0x118 ( PIN_OUTPUT_PULLDOWN | MUX_MODE7 ) /* (J17) gmii1_rxdv.gpio3[4] */ /* BT_EN */
			0x12c ( PIN_INPUT| MUX_MODE7 ) /* (K18) gmii1_txclk.gpio3[9] */ /* WLAN_IRQ */
			0x130 ( PIN_OUTPUT_PULLUP | MUX_MODE7 ) /* (L18) gmii1_rxclk.gpio3[10] */ /* WLAN_EN */
		>;
	};

	emmc_pins: pinmux_emmc_pins {
		pinctrl-single,pins = <
			0x80 ( PIN_INPUT_PULLUP | MUX_MODE2 ) /* (U9) gpmc_csn1.mmc1_clk */
			0x84 ( PIN_INPUT_PULLUP | MUX_MODE2 ) /* (V9) gpmc_csn2.mmc1_cmd */
			0x0 ( PIN_INPUT_PULLUP | MUX_MODE1 ) /* (U7) gpmc_ad0.mmc1_dat0 */
			0x4 ( PIN_INPUT_PULLUP | MUX_MODE1 ) /* (V7) gpmc_ad1.mmc1_dat1 */
			0x8 ( PIN_INPUT_PULLUP | MUX_MODE1 ) /* (R8) gpmc_ad2.mmc1_dat2 */
			0xc ( PIN_INPUT_PULLUP | MUX_MODE1 ) /* (T8) gpmc_ad3.mmc1_dat3 */
			0x10 ( PIN_INPUT_PULLUP | MUX_MODE1 ) /* (U8) gpmc_ad4.mmc1_dat4 */
			0x14 ( PIN_INPUT_PULLUP | MUX_MODE1 ) /* (V8) gpmc_ad5.mmc1_dat5 */
			0x18 ( PIN_INPUT_PULLUP | MUX_MODE1 ) /* (R9) gpmc_ad6.mmc1_dat6 */
			0x1c ( PIN_INPUT_PULLUP | MUX_MODE1 ) /* (T9) gpmc_ad7.mmc1_dat7 */
		>;
	};

	pcm_pins: pcm_pins {
		pinctrl-single,pins = <
			0x190 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* (A13) mcasp0_aclkx.mcasp0_aclkx */
			0x194 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* (B13) mcasp0_fsx.mcasp0_fsx */
			0x1a0 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* (B12) mcasp0_aclkr.mcasp0_aclkr */
			0x1a4 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* (C13) mcasp0_fsr.mcasp0_fsr */
			0x198 ( PIN_OUTPUT_PULLUP | MUX_MODE0 ) /* (D12) mcasp0_axr0.mcasp0_axr0 */
			0x1a8 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* (D13) mcasp0_axr1.mcasp0_axr1 */
		>;
	};

	can_pins: can_pins {
		pinctrl-single,pins = <
			0x16c ( PIN_INPUT_PULLUP | MUX_MODE2 ) /* (E17) uart0_rtsn.dcan1_rx */
			0x168 ( PIN_OUTPUT_PULLUP | MUX_MODE2 ) /* (E18) uart0_ctsn.dcan1_tx */
		>;
	};

	usb_expansion_pins: usb_expansion_pins {
		pinctrl-single,pins = <
			0x21c ( PIN_INPUT_PULLDOWN | MUX_MODE0 ) /* (F16) USB0_DRVVBUS.USB0_DRVVBUS */
		>;
	};

	usb_gsm_pins: usb_gsm_pins {
		pinctrl-single,pins = <
			0x234 ( PIN_INPUT_PULLDOWN | MUX_MODE0 ) /* (F15) USB1_DRVVBUS.USB1_DRVVBUS */
		>;
	};

	user_spi_pins: user_spi_pins {
		pinctrl-single,pins = <
			0x150 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* (A17) spi0_sclk.spi0_sclk */
			0x154 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* (B17) spi0_d0.spi0_d0 */
			0x158 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* (B16) spi0_d1.spi0_d1 */
			0x15c ( PIN_OUTPUT_PULLUP | MUX_MODE0 ) /* (A16) spi0_cs0.spi0_cs0 */
		>;
	};

	myglue1_pins: myglue1_pins {
		pinctrl-single,pins = <
			0x1c0 ( PIN_INPUT | MUX_MODE0 ) /* (B18) nNMI.nNMI */ /* EXT_INT~*/
			0x1b0 ( PIN_OUTPUT | MUX_MODE3 ) /* (A15) xdma_event_intr0.clkout1 */ /* CLKOUT1 */
		>;
	};

	mydebugss1_pins: mydebugss1_pins {
		pinctrl-single,pins = <
			0x1d0 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* (C11) TMS.TMS */
			0x1d4 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* (B11) TDI.TDI */
			0x1d8 ( PIN_OUTPUT | MUX_MODE0 ) /* (A11) TDO.TDO */
			0x1dc ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* (A12) TCK.TCK */
			0x1e0 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* (B10) nTRST.nTRST */
			0x1e4 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* (C14) EMU0.EMU0 */
			0x1e8 ( PIN_INPUT_PULLUP | MUX_MODE0 ) /* (B14) EMU1.EMU1 */
		>;
	};

};

